// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum USEROLE {
  ADMIN
  USER
}

model Event {
  id          String        @id @default(cuid())
  name        String
  image       String?
  expired     Boolean       @default(false)
  isopen      Boolean       @default(true)
  gameName    String?
  date        DateTime
  entryFees   Int
  prize       String
  seatsLeft   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Participant Participant[]
  reviewed    Boolean       @default(false)
  // Relation to the User model as the host
  host       User          @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId     String        // Foreign key to User (who is the event creator)


}

model Participant {
  id          String  @id @default(cuid())
  captainName String
  teamName    String
  player1Name String
  player2Name String
  player3Name String
  player4Name String
  player5Name String? // Optional player
  email       String
  phoneNumber String
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String // Foreign key to Event
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  // Foreign key to User

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          USEROLE   @default(USER)
  isOnboarded   Boolean   @default(false)
  accounts      Account[]

  age            Int?
  gender         String?
  phoneNumber    String?
  instagramId    String?
  bgmiId         String?
  interestedGame String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
// Relation to the events they have participated in
  Participant Participant[]
    // Relation to events they host
  Event       Event[]     // This will be a one-to-many relation where a user can host multiple event
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}
